%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.1
%%CreationDate: Wed Jan 25 11:01:50 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AUCAGUUCUAGCAGGAGCUGUACUCAGAGACUCGGGAAAUUUUCCCGGAAUUUUACCCGGGUUUUUACGU\
) def
/coor [
[95.84515381 137.54066467]
[83.09643555 133.77624512]
[72.44146729 125.82812500]
[59.67794418 133.70800781]
[46.91442108 141.58789062]
[34.15090179 149.46775818]
[21.38737679 157.34764099]
[8.62385464 165.22752380]
[-4.13966799 173.10739136]
[-11.43619156 187.79388428]
[-27.81799316 188.54795837]
[-36.43288040 174.59390259]
[-28.41859436 160.28643799]
[-12.01954651 160.34387207]
[0.74397600 152.46400452]
[13.50749874 144.58412170]
[26.27102089 136.70423889]
[39.03454590 128.82435608]
[51.79806519 120.94448090]
[64.56159210 113.06460571]
[62.37965775 96.64221954]
[67.43547058 80.86582947]
[78.75634766 68.77065277]
[94.16427612 62.68366241]
[110.69493103 63.77592850]
[125.16799927 71.83731842]
[137.18515015 62.86023331]
[149.20230103 53.88314819]
[161.21945190 44.90606308]
[173.23660278 35.92897797]
[185.25375366 26.95189476]
[197.27090454 17.97480965]
[209.28807068 8.99772453]
[221.30522156 0.02063969]
[233.32237244 -8.95644474]
[245.33952332 -17.93352890]
[240.24955750 -32.16672134]
[239.58270264 -47.26793671]
[243.39825439 -61.89438629]
[251.35691833 -74.74549866]
[262.75103760 -84.67855835]
[276.56744385 -90.81031799]
[291.57757568 -92.59555817]
[306.44674683 -89.87553406]
[319.85284424 -82.89210510]
[330.60375977 -72.26622772]
[337.74356079 -58.94275665]
[340.63732910 -44.10640335]
[339.02780151 -29.07640648]
[333.05810547 -15.18922043]
[323.25903320 -3.67968678]
[310.50189209 4.42877531]
[295.92108154 8.41516685]
[280.81311035 7.92502022]
[266.52133179 3.00191927]
[254.31660461 -5.91637754]
[242.29945374 3.06070733]
[230.28230286 12.03779221]
[218.26515198 21.01487732]
[206.24800110 29.99196053]
[194.23085022 38.96904755]
[182.21368408 47.94613266]
[170.19653320 56.92321396]
[158.17938232 65.90029907]
[146.16223145 74.87738800]
[134.14508057 83.85446930]
[137.62405396 96.68402863]
[136.44273376 109.92431641]
[130.74745178 121.93534088]
[121.24365234 131.22935486]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
] def

init

% switch off outline pairs or bases by removing these lines
/range 0.8 def
/drawreliability {
  /Smax 1 def
  0
  coor {
    aload pop
    S 3 index get
    Smax div range mul
    invert {range exch sub} if
    dup 0 ge
    {1 1 sethsbcolor} {pop 1 1 1 setrgbcolor} ifelse
    newpath
    fsize 2 div 0 360 arc
    fill
    1 add
  } forall
} bind def
/colorbar { % xloc yloc colorbar -> []
  /STR 8 string def
  gsave
    xmin xmax add size sub 2 div
    ymin ymax add size sub 2 div translate
    size dup scale
    translate
    0.015 dup scale
    /tics 64 def
    gsave
      10 tics div 1 scale
      0 1 tics
      {
          dup 0 moveto 0.5 add
          tics div range mul
          invert {range exch sub} if
          1 1 sethsbcolor
          1 0 rlineto 0 1 rlineto -1 0 rlineto closepath fill
      } for
    grestore
    0 setgray
    -0.1 1.01 moveto (0) gsave 0.1 dup scale show grestore
    10 1.01 moveto Smax STR cvs
    gsave 0.1 dup scale dup stringwidth pop -2 div 0 rmoveto show grestore
  grestore
} bind def
/S [
  0.96652
  0.99831
  0.97126
  0.99369
  0.99710
  0.99589
  0.99556
  0.99558
  0.90205
  0.99739
  0.99722
  0.99723
  0.99847
  0.90205
  0.99558
  0.99556
  0.99589
  0.99710
  0.99369
  0.97126
  0.96013
  0.74225
  0.68026
  0.99723
  0.99968
  0.76465
  0.96370
  0.98589
  0.99475
  0.99832
  0.99987
  0.99861
  0.99964
  0.99941
  0.99921
  0.98583
  0.54053
  0.07623
  0.05098
  0.58880
  0.48570
  0.04770
  0.23967
  0.55494
  0.99960
  0.99961
  0.78413
  0.06264
  0.02707
  0.04318
  0.60284
  0.47120
  0.15080
  0.43306
  1.00000
  0.98583
  0.99921
  0.99941
  0.99964
  0.99861
  0.99987
  0.99832
  0.99475
  0.98589
  0.96370
  0.76465
  0.99309
  0.99387
  0.68142
  0.74953
] def

/invert true def
drawreliability
0.1 0.1 colorbar
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
