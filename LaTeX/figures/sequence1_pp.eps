%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.1
%%CreationDate: Wed Jan 25 11:01:50 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: --noLP 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AUCAGUUCUAGCAGGAGCUGUACUCAGAGACUCGGGAAAUUUUCCCGGAAUUUUACCCGGGUUUUUACGU\
) def
/coor [
[-64.34592438 257.40649414]
[-77.13578033 253.54542542]
[-87.76591492 245.50666809]
[-100.52943420 253.38655090]
[-113.29296112 261.26641846]
[-126.05648041 269.14630127]
[-138.82000732 277.02618408]
[-151.58352661 284.90606689]
[-164.34704590 292.78594971]
[-171.64356995 307.47241211]
[-188.02537537 308.22650146]
[-196.64025879 294.27243042]
[-188.62597656 279.96499634]
[-172.22692871 280.02239990]
[-159.46340942 272.14254761]
[-146.69987488 264.26266479]
[-133.93635559 256.38278198]
[-121.17283630 248.50289917]
[-108.40931702 240.62301636]
[-95.64579010 232.74314880]
[-97.94795990 216.28543091]
[-92.95891571 200.37748718]
[-81.59722137 188.10278320]
[-66.02130127 181.86131287]
[-49.21950912 182.90040588]
[-34.43682098 191.06573486]
[-22.41966820 182.08863831]
[-10.40251541 173.11155701]
[1.61463726 164.13447571]
[13.63178921 155.15739441]
[25.64894104 146.18029785]
[37.66609573 137.20321655]
[49.68324661 128.22613525]
[61.70039749 119.24904633]
[73.71755219 110.27196503]
[85.73470306 101.29488373]
[91.42751312 88.52446747]
[105.28820801 86.68796539]
[117.30536652 77.71088409]
[119.70450592 62.31991577]
[132.01948547 53.38706207]
[146.67764282 55.76912689]
[158.69479370 46.79204178]
[170.71194458 37.81496048]
[179.78279114 23.49169159]
[196.05735779 28.24297523]
[195.99700928 45.19681549]
[179.68902588 49.83211136]
[167.67187500 58.80919647]
[155.65472412 67.78627777]
[153.78099060 82.51803589]
[141.72177124 91.79326630]
[126.28244781 89.72803497]
[114.26529694 98.70511627]
[108.57248688 111.47553253]
[94.71179199 113.31203461]
[82.69463348 122.28911591]
[70.67748260 131.26620483]
[58.66033173 140.24328613]
[46.64318085 149.22036743]
[34.62602615 158.19744873]
[22.60887527 167.17454529]
[10.59172153 176.15162659]
[-1.42543030 185.12870789]
[-13.44258308 194.10578918]
[-25.45973587 203.08288574]
[-21.95222664 216.17607117]
[-23.20186806 229.64057922]
[-29.03099442 241.80604553]
[-38.69523239 251.17109680]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[38 54]
[39 53]
[42 50]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
/range 0.8 def
/drawreliability {
  /Smax 1 def
  0
  coor {
    aload pop
    S 3 index get
    Smax div range mul
    invert {range exch sub} if
    dup 0 ge
    {1 1 sethsbcolor} {pop 1 1 1 setrgbcolor} ifelse
    newpath
    fsize 2 div 0 360 arc
    fill
    1 add
  } forall
} bind def
/colorbar { % xloc yloc colorbar -> []
  /STR 8 string def
  gsave
    xmin xmax add size sub 2 div
    ymin ymax add size sub 2 div translate
    size dup scale
    translate
    0.015 dup scale
    /tics 64 def
    gsave
      10 tics div 1 scale
      0 1 tics
      {
          dup 0 moveto 0.5 add
          tics div range mul
          invert {range exch sub} if
          1 1 sethsbcolor
          1 0 rlineto 0 1 rlineto -1 0 rlineto closepath fill
      } for
    grestore
    0 setgray
    -0.1 1.01 moveto (0) gsave 0.1 dup scale show grestore
    10 1.01 moveto Smax STR cvs
    gsave 0.1 dup scale dup stringwidth pop -2 div 0 rmoveto show grestore
  grestore
} bind def
/S [
  0.96652
  0.99831
  0.97126
  0.99369
  0.99710
  0.99589
  0.99556
  0.99558
  0.90205
  0.99739
  0.99722
  0.99723
  0.99847
  0.90205
  0.99558
  0.99556
  0.99589
  0.99710
  0.99369
  0.97126
  0.96013
  0.74225
  0.68026
  0.99723
  0.99968
  0.76465
  0.96370
  0.98589
  0.99475
  0.99832
  0.99987
  0.99861
  0.99964
  0.99941
  0.99921
  0.98583
  0.54053
  0.36785
  0.40196
  0.58880
  0.48570
  0.44385
  0.45033
  0.44467
  0.99960
  0.99961
  0.78413
  0.44467
  0.45033
  0.44385
  0.60284
  0.47120
  0.40196
  0.36785
  1.00000
  0.98583
  0.99921
  0.99941
  0.99964
  0.99861
  0.99987
  0.99832
  0.99475
  0.98589
  0.96370
  0.76465
  0.99309
  0.99387
  0.68142
  0.74953
] def

/invert true def
drawreliability
0.1 0.1 colorbar
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
