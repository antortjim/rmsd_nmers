%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.1
%%CreationDate: Thu Jan 26 16:36:50 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: --noLP 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AUCGGUUCCAGCAGGAACUGUACUCAGAGACUCGGGAAACCUUCCCGGAAUUUUACCCGGGUUUUUACGU\
) def
/coor [
[-61.25637436 255.09852600]
[-74.04623413 251.23745728]
[-84.67636108 243.19869995]
[-97.43988800 251.07858276]
[-110.20340729 258.95846558]
[-122.96693420 266.83834839]
[-135.73045349 274.71823120]
[-148.49397278 282.59808350]
[-161.25749207 290.47796631]
[-168.55401611 305.16445923]
[-184.93582153 305.91851807]
[-193.55070496 291.96447754]
[-185.53642273 277.65701294]
[-169.13737488 277.71444702]
[-156.37385559 269.83456421]
[-143.61033630 261.95468140]
[-130.84681702 254.07481384]
[-118.08329010 246.19493103]
[-105.31976318 238.31506348]
[-92.55624390 230.43518066]
[-94.85840607 213.97746277]
[-89.86936951 198.06951904]
[-78.50767517 185.79481506]
[-62.93175125 179.55335999]
[-46.12995911 180.59243774]
[-31.34726906 188.75776672]
[-19.33011818 179.78068542]
[-7.31296492 170.80358887]
[4.70418739 161.82650757]
[16.72134018 152.84942627]
[28.73849106 143.87234497]
[40.75564575 134.89524841]
[52.77279663 125.91816711]
[64.78994751 116.94108582]
[76.80709839 107.96400452]
[88.82425690 98.98691559]
[100.63986969 89.74618530]
[112.24817657 80.24633026]
[123.85648346 70.74646759]
[134.80917358 60.49763107]
[145.05799866 49.54494858]
[145.96492004 33.52754974]
[159.13607788 24.36784363]
[174.46769714 29.09237671]
[180.19865417 44.07688904]
[171.93267822 57.82654190]
[156.01069641 59.79378510]
[145.76185608 70.74646759]
[145.64646912 74.58155060]
[143.44892883 78.51076508]
[139.17135620 81.44510651]
[133.35633850 82.35477448]
[121.74803162 91.85462952]
[110.13973236 101.35448456]
[106.23545837 108.72693634]
[97.80133820 111.00406647]
[85.78418732 119.98115540]
[73.76703644 128.95823669]
[61.74988174 137.93531799]
[49.73272705 146.91241455]
[37.71557617 155.88949585]
[25.69842339 164.86657715]
[13.68127155 173.84365845]
[1.66411960 182.82073975]
[-10.35303307 191.79783630]
[-22.37018585 200.77491760]
[-18.86267662 213.86810303]
[-20.11231804 227.33262634]
[-25.94144440 239.49807739]
[-35.60568237 248.86312866]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 54]
[38 53]
[39 52]
[40 48]
[41 47]
] def

init

% switch off outline pairs or bases by removing these lines
/range 0.8 def
/drawreliability {
  /Smax 1 def
  0
  coor {
    aload pop
    S 3 index get
    Smax div range mul
    invert {range exch sub} if
    dup 0 ge
    {1 1 sethsbcolor} {pop 1 1 1 setrgbcolor} ifelse
    newpath
    fsize 2 div 0 360 arc
    fill
    1 add
  } forall
} bind def
/colorbar { % xloc yloc colorbar -> []
  /STR 8 string def
  gsave
    xmin xmax add size sub 2 div
    ymin ymax add size sub 2 div translate
    size dup scale
    translate
    0.015 dup scale
    /tics 64 def
    gsave
      10 tics div 1 scale
      0 1 tics
      {
          dup 0 moveto 0.5 add
          tics div range mul
          invert {range exch sub} if
          1 1 sethsbcolor
          1 0 rlineto 0 1 rlineto -1 0 rlineto closepath fill
      } for
    grestore
    0 setgray
    -0.1 1.01 moveto (0) gsave 0.1 dup scale show grestore
    10 1.01 moveto Smax STR cvs
    gsave 0.1 dup scale dup stringwidth pop -2 div 0 rmoveto show grestore
  grestore
} bind def
/S [
  0.96874
  0.99924
  0.92685
  0.98941
  0.99979
  0.99894
  0.99923
  0.99991
  0.99703
  0.99998
  0.99997
  0.99999
  0.99997
  0.99703
  0.99991
  0.99923
  0.99894
  0.99979
  0.98941
  0.92685
  0.95058
  0.73815
  0.68580
  0.99891
  0.99894
  0.75765
  0.96300
  0.98507
  0.99387
  0.99744
  0.99898
  0.99765
  0.99857
  0.99637
  0.99627
  0.99147
  0.52134
  0.51888
  0.48043
  0.53418
  0.53444
  0.62797
  0.62775
  0.65343
  0.99646
  0.99650
  0.53444
  0.53418
  0.62791
  0.68319
  0.93469
  0.48043
  0.51888
  0.52134
  1.00000
  0.99147
  0.99627
  0.99637
  0.99857
  0.99765
  0.99898
  0.99744
  0.99387
  0.98507
  0.96300
  0.75765
  0.98120
  0.98155
  0.68326
  0.75239
] def

/invert true def
drawreliability
0.1 0.1 colorbar
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
