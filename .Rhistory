nrow(my_data)
my_data %>%
group_by(f1.seq_id, f2.seq_id) %>%
filter(row_number() == 1) %>%
nrow
my_data_p <- my_data %>%
group_by(f1.seq_id, f2.seq_id) %>%
filter(row_number() == 1)
print("Plotting histograms")
ggplot(data = my_data_p, aes(rmsd, fill = pair)) +
geom_histogram(bins = 50) +
facet_wrap( ~ pair)
my_data_p$pair %>% table
setwd("/home/antortjim/MEGA/Master/SB/exam")
library("ggplot2")
library("dplyr")
theme_set(theme_bw(base_size = 20))
flen <- 5
out_folder = "out/"
plot_folder = "plots/"
signal_fn <- paste(out_folder, flen, "-mers_rmsd.txt", sep = "")
random_fn <- paste(out_folder, flen, "-mers_random.txt", sep = "")
fragments_fn <- paste(out_folder, flen, "-mer_fragments.csv", sep = "")
print("Reading data")
signal <- read.csv(file = signal_fn, header = T)
signal$pair <- "signal"
random <- read.csv(file = random_fn, header = T)
random$pair <- "random"
fragments <- read.csv(file = fragments_fn, header = T)
my_data <- full_join(signal, random)
check_intraprotein <- function(my_row) {
if (my_row[2] == my_row[6]) {
if(my_row[3] == my_row[7] & my_row[4] == my_row[8]) {
return(NA)
} else {
return(TRUE)
}
} else {
return(FALSE)
}
}
my_data$intraprotein <- apply(my_data, 1, check_intraprotein)
my_data$intraprotein
my_data <- filter(my_data, intraprotein == FALSE)
l <- sum(my_data$pair == "signal")
idx <- which(my_data$pair == "random")[1:l]
my_data <- my_data[c(1:243, idx), ]
my_data$pair <- as.factor(my_data$pair)
my_data_p$pair %>% table
# Analysis of fragments results from protein.py
setwd("/home/antortjim/MEGA/Master/SB/exam")
library("ggplot2")
library("dplyr")
theme_set(theme_bw(base_size = 20))
flen <- 5
out_folder = "out/"
plot_folder = "plots/"
signal_fn <- paste(out_folder, flen, "-mers_rmsd.txt", sep = "")
random_fn <- paste(out_folder, flen, "-mers_random.txt", sep = "")
fragments_fn <- paste(out_folder, flen, "-mer_fragments.csv", sep = "")
print("Reading data")
signal <- read.csv(file = signal_fn, header = T)
signal$pair <- "signal"
random <- read.csv(file = random_fn, header = T)
random$pair <- "random"
fragments <- read.csv(file = fragments_fn, header = T)
my_data <- full_join(signal, random)
check_intraprotein <- function(my_row) {
if (my_row[2] == my_row[6]) {
if(my_row[3] == my_row[7] & my_row[4] == my_row[8]) {
return(NA)
} else {
return(TRUE)
}
} else {
return(FALSE)
}
}
my_data$intraprotein <- apply(my_data, 1, check_intraprotein)
#Working with interprotein only
my_data <- filter(my_data, intraprotein == FALSE)
l <- sum(my_data$pair == "signal")
idx <- which(my_data$pair == "random")[1:l]
my_data <- my_data[c(1:243, idx), ]
my_data$pair <- as.factor(my_data$pair)
# Analysis of fragments results from protein.py
setwd("/home/antortjim/MEGA/Master/SB/exam")
library("ggplot2")
library("dplyr")
theme_set(theme_bw(base_size = 20))
flen <- 5
out_folder = "out/"
plot_folder = "plots/"
signal_fn <- paste(out_folder, flen, "-mers_rmsd.txt", sep = "")
random_fn <- paste(out_folder, flen, "-mers_random.txt", sep = "")
fragments_fn <- paste(out_folder, flen, "-mer_fragments.csv", sep = "")
print("Reading data")
signal <- read.csv(file = signal_fn, header = T)
signal$pair <- "signal"
random <- read.csv(file = random_fn, header = T)
random$pair <- "random"
fragments <- read.csv(file = fragments_fn, header = T)
my_data <- full_join(signal, random)
check_intraprotein <- function(my_row) {
if (my_row[2] == my_row[6]) {
if(my_row[3] == my_row[7] & my_row[4] == my_row[8]) {
return(NA)
} else {
return(TRUE)
}
} else {
return(FALSE)
}
}
my_data$intraprotein <- apply(my_data, 1, check_intraprotein)
my_data <- filter(my_data, intraprotein == FALSE)
l <- sum(my_data$pair == "signal")
l
my_data <- filter(my_data, intraprotein == FALSE)
# Analysis of fragments results from protein.py
setwd("/home/antortjim/MEGA/Master/SB/exam")
library("ggplot2")
library("dplyr")
theme_set(theme_bw(base_size = 20))
flen <- 5
out_folder = "out/"
plot_folder = "plots/"
signal_fn <- paste(out_folder, flen, "-mers_rmsd.txt", sep = "")
random_fn <- paste(out_folder, flen, "-mers_random.txt", sep = "")
fragments_fn <- paste(out_folder, flen, "-mer_fragments.csv", sep = "")
print("Reading data")
signal <- read.csv(file = signal_fn, header = T)
signal$pair <- "signal"
random <- read.csv(file = random_fn, header = T)
random$pair <- "random"
fragments <- read.csv(file = fragments_fn, header = T)
my_data <- full_join(signal, random)
check_intraprotein <- function(my_row) {
if (my_row[2] == my_row[6]) {
if(my_row[3] == my_row[7] & my_row[4] == my_row[8]) {
return(NA)
} else {
return(TRUE)
}
} else {
return(FALSE)
}
}
my_data$intraprotein <- apply(my_data, 1, check_intraprotein)
my_data <- filter(my_data, intraprotein == FALSE)
my_data
l <- sum(my_data$pair == "signal")
l
idx <- which(my_data$pair == "random")[1:l]
idx
View(my_data)
l
# Analysis of fragments results from protein.py
setwd("/home/antortjim/MEGA/Master/SB/exam")
library("ggplot2")
library("dplyr")
theme_set(theme_bw(base_size = 20))
flen <- 5
out_folder = "out/"
plot_folder = "plots/"
signal_fn <- paste(out_folder, flen, "-mers_rmsd.txt", sep = "")
random_fn <- paste(out_folder, flen, "-mers_random.txt", sep = "")
fragments_fn <- paste(out_folder, flen, "-mer_fragments.csv", sep = "")
print("Reading data")
signal <- read.csv(file = signal_fn, header = T)
signal$pair <- "signal"
random <- read.csv(file = random_fn, header = T)
random$pair <- "random"
fragments <- read.csv(file = fragments_fn, header = T)
my_data <- full_join(signal, random)
check_intraprotein <- function(my_row) {
if (my_row[2] == my_row[6]) {
if(my_row[3] == my_row[7] & my_row[4] == my_row[8]) {
return(NA)
} else {
return(TRUE)
}
} else {
return(FALSE)
}
}
my_data$intraprotein <- apply(my_data, 1, check_intraprotein)
my_data <- filter(my_data, intraprotein == FALSE) # keep only interprotein
my_data
View(my_data)
my_data$pair %>% table
my_data$pair == "signal"
l <- my_table[2]
l
my_table <- my_data$pair %>% table
l <- my_table[2]
l
l + 1
my_data
my_data$pair == "random"
which(my_data$pair == "random")
idx <- which(my_data$pair == "random")[1:l]
my_data <- my_data[c(1:l, idx), ]
View(my_data)
my_data$pair %>% table
ggplot(data = my_data, aes(rmsd, fill = pair)) +
geom_histogram(bins = 50) +
facet_wrap( ~ pair)
my_data_p <- my_data %>%
group_by(f1.seq_id, f2.seq_id) %>%
filter(row_number() == 1)
View(my_data_p)
my_data <- filter(my_data, intraprotein == FALSE) # keep only interprotein
my_data_ <- my_data %>%
group_by(f1.seq_id, f2.seq_id) %>%
filter(row_number() == 1)
my_table <- my_data$pair %>% table
l <- my_table[2]
idx <- which(my_data$pair == "random")[1:l]
my_data <- my_data[c(1:l, idx), ]
# Analysis of fragments results from protein.py
setwd("/home/antortjim/MEGA/Master/SB/exam")
library("ggplot2")
library("dplyr")
theme_set(theme_bw(base_size = 20))
flen <- 5
out_folder = "out/"
plot_folder = "plots/"
signal_fn <- paste(out_folder, flen, "-mers_rmsd.txt", sep = "")
random_fn <- paste(out_folder, flen, "-mers_random.txt", sep = "")
fragments_fn <- paste(out_folder, flen, "-mer_fragments.csv", sep = "")
print("Reading data")
signal <- read.csv(file = signal_fn, header = T)
signal$pair <- "signal"
random <- read.csv(file = random_fn, header = T)
random$pair <- "random"
fragments <- read.csv(file = fragments_fn, header = T)
my_data <- full_join(signal, random)
check_intraprotein <- function(my_row) {
if (my_row[2] == my_row[6]) {
if(my_row[3] == my_row[7] & my_row[4] == my_row[8]) {
return(NA)
} else {
return(TRUE)
}
} else {
return(FALSE)
}
}
my_data$intraprotein <- apply(my_data, 1, check_intraprotein)
#Working with interprotein only
my_data <- filter(my_data, intraprotein == FALSE) # keep only interprotein
my_data<- my_data %>%
group_by(f1.seq_id, f2.seq_id) %>%
filter(row_number() == 1)
my_table <- my_data$pair %>% table
l <- my_table[2]
idx <- which(my_data$pair == "random")[1:l]
my_data <- my_data[c(1:l, idx), ]
View(my_data)
my_data$pair %>% table
ggplot(data = my_data, aes(rmsd, fill = pair)) +
geom_histogram(bins = 50) +
facet_wrap( ~ pair)
ggplot(data = my_data, aes(rmsd, fill = pair)) +
geom_histogram(bins = 50) +
facet_wrap( ~ pair)
# Analysis of fragments results from protein.py
setwd("/home/antortjim/MEGA/Master/SB/exam")
library("ggplot2")
library("dplyr")
theme_set(theme_bw(base_size = 20))
flen <- 5
out_folder = "out/"
plot_folder = "plots/"
signal_fn <- paste(out_folder, flen, "-mers_rmsd.txt", sep = "")
random_fn <- paste(out_folder, flen, "-mers_random.txt", sep = "")
fragments_fn <- paste(out_folder, flen, "-mer_fragments.csv", sep = "")
print("Reading data")
signal <- read.csv(file = signal_fn, header = T)
signal$pair <- "signal"
random <- read.csv(file = random_fn, header = T)
random$pair <- "random"
fragments <- read.csv(file = fragments_fn, header = T)
my_data <- full_join(signal, random)
# Analysis of fragments results from protein.py
setwd("/home/antortjim/MEGA/Master/SB/exam")
library("ggplot2")
library("dplyr")
theme_set(theme_bw(base_size = 20))
flen <- 5
out_folder = "out/"
plot_folder = "plots/"
signal_fn <- paste(out_folder, flen, "-mers_rmsd.txt", sep = "")
random_fn <- paste(out_folder, flen, "-mers_random.txt", sep = "")
fragments_fn <- paste(out_folder, flen, "-mer_fragments.csv", sep = "")
print("Reading data")
signal <- read.csv(file = signal_fn, header = T)
signal$pair <- "signal"
random <- read.csv(file = random_fn, header = T)
random$pair <- "random"
fragments <- read.csv(file = fragments_fn, header = T)
my_data <- full_join(signal, random)
View(my_data)
# Analysis of fragments results from protein.py
setwd("/home/antortjim/MEGA/Master/SB/exam")
library("ggplot2")
library("dplyr")
theme_set(theme_bw(base_size = 20))
flen <- 5
out_folder = "out/"
plot_folder = "plots/"
signal_fn <- paste(out_folder, flen, "-mers_rmsd.txt", sep = "")
random_fn <- paste(out_folder, flen, "-mers_random.txt", sep = "")
fragments_fn <- paste(out_folder, flen, "-mer_fragments.csv", sep = "")
print("Reading data")
signal <- read.csv(file = signal_fn, header = T)
signal$pair <- "signal"
random <- read.csv(file = random_fn, header = T)
random$pair <- "random"
fragments <- read.csv(file = fragments_fn, header = T)
#my_data <- full_join(signal, random)
check_intraprotein <- function(my_row) {
if (my_row[2] == my_row[6]) {
if(my_row[3] == my_row[7] & my_row[4] == my_row[8]) {
return(NA)
} else {
return(TRUE)
}
} else {
return(FALSE)
}
}
signal$intraprotein <- apply(msignal, 1, check_intraprotein)
# Analysis of fragments results from protein.py
setwd("/home/antortjim/MEGA/Master/SB/exam")
library("ggplot2")
library("dplyr")
theme_set(theme_bw(base_size = 20))
flen <- 5
out_folder = "out/"
plot_folder = "plots/"
signal_fn <- paste(out_folder, flen, "-mers_rmsd.txt", sep = "")
random_fn <- paste(out_folder, flen, "-mers_random.txt", sep = "")
fragments_fn <- paste(out_folder, flen, "-mer_fragments.csv", sep = "")
print("Reading data")
signal <- read.csv(file = signal_fn, header = T)
signal$pair <- "signal"
random <- read.csv(file = random_fn, header = T)
random$pair <- "random"
fragments <- read.csv(file = fragments_fn, header = T)
#my_data <- full_join(signal, random)
check_intraprotein <- function(my_row) {
if (my_row[2] == my_row[6]) {
if(my_row[3] == my_row[7] & my_row[4] == my_row[8]) {
return(NA)
} else {
return(TRUE)
}
} else {
return(FALSE)
}
}
signal$intraprotein <- apply(signal, 1, check_intraprotein)
#Working with interprotein only
signal <- filter(signal, intraprotein == FALSE) # keep only interprotein
# Remove duplicates
# Duplicate = two or more entries where f1 and f2.seq_id
# are identical
signal <- signal %>%
group_by(f1.seq_id, f2.seq_id) %>%
filter(row_number() == 1)
my_table <- my_data$pair %>% table
signal
nrow(signal)
sample(nrow(signal))
sample(size = nrow(signal))
sample(x = 1:nrow(noise), size = nrow(signal))
sample(x = 1:nrow(random), size = nrow(signal))
idx <- sample(x = 1:nrow(random), size = nrow(signal))
noise[idx, ]
random[idx, ]
random <- random[idx, ]
full_join(signal, noise)
full_join(signal, random)
my_data <- full_join(signal, random)
View(my_data)
print("Plotting histograms")
ggplot(data = my_data, aes(rmsd, fill = pair)) +
geom_histogram(bins = 50) +
facet_wrap( ~ pair)
ggplot(data = my_data, aes(rmsd, fill = pair)) +
geom_histogram(bins = 30) +
facet_wrap( ~ pair)
print("Plotting histograms")
ggplot(data = my_data, aes(rmsd, fill = pair)) +
geom_histogram(bins = 60) +
facet_wrap( ~ pair)
my_data$pair
my_data$pair %>% table
ggplot(data = my_data, aes(rmsd, col = pair)) +
geom_density(stat = "density", lwd = 1.2)
# Analysis of fragments results from protein.py
setwd("/home/antortjim/MEGA/Master/SB/exam")
library("ggplot2")
library("dplyr")
theme_set(theme_bw(base_size = 20))
flen <- 5
out_folder = "out/"
plot_folder = "plots/"
signal_fn <- paste(out_folder, flen, "-mers_rmsd.txt", sep = "")
random_fn <- paste(out_folder, flen, "-mers_random.txt", sep = "")
fragments_fn <- paste(out_folder, flen, "-mer_fragments.csv", sep = "")
print("Reading data")
signal <- read.csv(file = signal_fn, header = T)
signal$pair <- "signal"
random <- read.csv(file = random_fn, header = T)
random$pair <- "random"
fragments <- read.csv(file = fragments_fn, header = T)
#my_data <- full_join(signal, random)
check_intraprotein <- function(my_row) {
if (my_row[2] == my_row[6]) {
if(my_row[3] == my_row[7] & my_row[4] == my_row[8]) {
return(NA)
} else {
return(TRUE)
}
} else {
return(FALSE)
}
}
signal$intraprotein <- apply(signal, 1, check_intraprotein)
#Working with interprotein only
signal <- filter(signal, intraprotein == FALSE) # keep only interprotein
# Remove duplicates
# Duplicate = two or more entries where f1 and f2.seq_id
# are identical
# signal <- signal %>%
#   group_by(f1.seq_id, f2.seq_id) %>%
#   filter(row_number() == 1)
idx <- sample(x = 1:nrow(random), size = nrow(signal))
random <- random[idx, ]
my_data <- full_join(signal, random)
print("Plotting histograms")
ggplot(data = my_data, aes(rmsd, fill = pair)) +
geom_histogram(bins = 60) +
facet_wrap( ~ pair)
ggplot(data = my_data, aes(rmsd, col = pair)) +
geom_density(stat = "density", lwd = 1.2)
source('~/MEGA/Master/SB/exam/analysis/analysis.R', echo=TRUE)
setwd("/home/antortjim/MEGA/Master/SB/exam")
library("ggplot2")
library("dplyr")
theme_set(theme_bw(base_size = 20))
flen <- 5
out_folder = "out/"
plot_folder = "plots/"
signal_fn <- paste(out_folder, flen, "-mers_rmsd.txt", sep = "")
random_fn <- paste(out_folder, flen, "-mers_random.txt", sep = "")
fragments_fn <- paste(out_folder, flen, "-mer_fragments.csv", sep = "")
print("Reading data")
signal <- read.csv(file = signal_fn, header = T)
signal$pair <- "signal"
random <- read.csv(file = random_fn, header = T)
random$pair <- "random"
fragments <- read.csv(file = fragments_fn, header = T)
check_intraprotein <- function(my_row) {
if (my_row[2] == my_row[6]) {
if(my_row[3] == my_row[7] & my_row[4] == my_row[8]) {
return(NA)
} else {
return(TRUE)
}
} else {
return(FALSE)
}
}
signal$intraprotein <- apply(signal, 1, check_intraprotein)
#Working with interprotein only
signal <- filter(signal, intraprotein == FALSE) # keep only interprotein
# Should duplicates be excluded?
idx <- sample(x = 1:nrow(random), size = nrow(signal))
random <- random[idx, ]
my_data <- full_join(signal, random)
print("Plotting histograms")
ggplot(data = my_data, aes(rmsd, fill = pair)) +
geom_histogram(bins = 60) +
facet_wrap( ~ pair)
View(my_data)
check_intraprotein <- function(my_row) {
if (my_row[2] == my_row[6]) {
if(my_row[3] == my_row[7] & my_row[4] == my_row[8]) {
return(NA)
} else {
return(TRUE)
}
} else {
return(FALSE)
}
}
signal$intraprotein <- apply(signal, 1, check_intraprotein)
#Working with interprotein only
signal <- filter(signal, intraprotein == FALSE) # keep only interprotein
# Should duplicates be excluded?
idx <- sample(x = 1:nrow(random), size = nrow(signal))
random <- random[idx, ]
my_data <- full_join(signal, random)
print("Plotting histograms")
ggplot(data = my_data, aes(rmsd, fill = pair)) +
geom_histogram(bins = 60) +
facet_wrap( ~ pair)
View(my_data)
